# Day 13

```elixir
Mix.install([:kino])
```

## Section

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = Kino.Input.textarea("Put your data here")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input =
  input
  |> Kino.Input.read()
  |> String.split("\n\n", trim: true)
  |> Enum.map(fn str ->
    {:ok, {_, _, list}} = Code.string_to_quoted(str)
    list
  end)
  |> Enum.map(fn [a, b] -> {a, b} end)
```

## Part 1

```elixir
defmodule Day13 do
  def compare([a_hd | _], [b_hd | _])
      when is_integer(a_hd) and is_integer(b_hd) and a_hd > b_hd do
    false
  end

  def compare([a_hd | _], [b_hd | _])
      when is_integer(a_hd) and is_integer(b_hd) and a_hd < b_hd do
    true
  end

  def compare([_ | a_tl], [_, b_tl]) do
    compare(a_tl, b_tl)
  end

  def compare(
        [[aa_hd | aa_tl] | a_tl],
        [[bb_hd | bb_tl] | b_tl]
      ) do
    compare(aa_hd, bb_hd) && compare(aa_tl, bb_tl) && compare(a_tl, b_tl)
  end

  def compare([[] | _], [[_ | _], _]) do
    true
  end

  def compare([[_ | _], _], [[] | _]) do
    false
  end

  def compare([a_hd | a_tl], b) when is_integer(a_hd) do
    compare([[a_hd] | a_tl], b)
  end

  def compare(a, [b_hd | b_tl]) when is_integer(b_hd) do
    compare(a, [b_hd | b_tl])
  end
end
```

```elixir
import Day13

compare([1, 1, 3, 1, 1], [1, 1, 5, 1, 1])
```
